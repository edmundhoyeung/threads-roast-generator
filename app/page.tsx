"use client"; // Mark this as a Client Component

import { useState } from "react";
import axios, { AxiosError } from "axios";

// Define the structure of the error response
interface ErrorResponse {
  message?: string;
}

export default function Home() {
  const [accountName, setAccountName] = useState<string>("");
  const [roast, setRoast] = useState<string>("");
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [error, setError] = useState<string>("");

  const handleRoast = async () => {
    if (!accountName) {
      setError("Please enter a Threads account name.");
      return;
    }

    setIsLoading(true);
    setError("");
    try {
      const response = await axios.post("/api/roast", { accountName });
      setRoast(response.data.roast);
    } catch (error) {
      console.error("Error:", error);
      // Type the error as AxiosError and define the structure of the response data
      const axiosError = error as AxiosError<ErrorResponse>;
      setError(
        axiosError.response?.data?.message || "Failed to generate roast. Please try again."
      );
    } finally {
      setIsLoading(false);
    }
  };

  const handleShare = () => {
    if (roast) {
      const shareText = `Check out this roast for @${accountName}:\n\n${roast}\n\nGenerated by Threads Roast Generator!`;
      const shareUrl = window.location.href;

      // Share on Twitter
      window.open(
        `https://twitter.com/intent/tweet?text=${encodeURIComponent(
          shareText
        )}&url=${encodeURIComponent(shareUrl)}`,
        "_blank"
      );
    }
  };

  return (
    <div className="min-h-screen bg-gray-100 flex flex-col items-center justify-center p-4">
      <h1 className="text-4xl font-bold mb-8">Threads Roast Generator</h1>
      <div className="bg-white p-6 rounded-lg shadow-md w-full max-w-md">
        <input
          type="text"
          placeholder="Enter your Threads account name"
          value={accountName}
          onChange={(e) => setAccountName(e.target.value)}
          className="w-full p-2 border border-gray-300 rounded mb-4"
        />
        {error && <p className="text-red-500 text-sm mb-4">{error}</p>}
        <button
          onClick={handleRoast}
          disabled={isLoading}
          className="w-full bg-blue-500 text-white py-2 rounded hover:bg-blue-600 disabled:bg-blue-300"
        >
          {isLoading ? "Roasting..." : "Roast Me!"}
        </button>
      </div>
      {roast && (
        <div className="mt-8 bg-white p-6 rounded-lg shadow-md w-full max-w-md">
          <p className="text-gray-700 mb-4">{roast}</p>
          <button
            onClick={handleShare}
            className="w-full bg-green-500 text-white py-2 rounded hover:bg-green-600"
          >
            Share on Twitter
          </button>
        </div>
      )}
    </div>
  );
}